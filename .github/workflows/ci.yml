name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-docker:
    name: Docker Tests
    runs-on: ubuntu-latest

    # Run a local registry to push to
    services:
      registry:
        image: registry:2
        ports:
          - 5001:5000

    env:
      TEST_TAG: localhost:5001/actions/bruno-action:latest
      RUN_OUTPUT: run-output.log

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Docker BuildX
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build the Container
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.TEST_TAG }}

      - name: Run the Container
        id: run
        run: >-
          docker run
          --env BRUNO_ACTION_DRY_RUN=true
          --env INPUT_PATH="./"
          --env INPUT_FILENAME=users/get-user.bru
          --env INPUT_RECURSIVE=true
          --env INPUT_ENV="cicd"
          --env INPUT_ENVVARS="apikey=mypassword"
          --env INPUT_OUTPUT=output.html
          --env INPUT_OUTPUTFORMAT=html
          --env INPUT_INSECURE=true
          --env INPUT_TESTSONLY=true
          --env INPUT_BAIL=true
          --rm ${{ env.TEST_TAG }}
          > ${{ env.RUN_OUTPUT }}

      - name: Assert output
        id: assert
        run: >-
          cat ${{ env.RUN_OUTPUT }}
          && grep -q 'run users/get-user.bru' ${{ env.RUN_OUTPUT }}
          && grep -q '\-\-env cicd' ${{ env.RUN_OUTPUT }}
          && grep -q '\-r' ${{ env.RUN_OUTPUT }}
          && grep -q '\-\-env cicd' ${{ env.RUN_OUTPUT }}
          && grep -q '\-\-env\-var apikey=mypassword' ${{ env.RUN_OUTPUT }}
          && grep -q '\-\-output output.html' ${{ env.RUN_OUTPUT }}
          && grep -q '\-\-format html' ${{ env.RUN_OUTPUT }}
          && grep -q '\-\-insecure' ${{ env.RUN_OUTPUT }}
          && grep -q '\-\-tests\-only' ${{ env.RUN_OUTPUT }}
          && grep -q '\-\-bail' ${{ env.RUN_OUTPUT }}


  bru-run-successfully:
    name: Action Successful Run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: bru-run
        uses: ./
        with:
          path: .github/bruno-collection
          env: cicd
          envVars: |-
            secretKey=hello
            secretMessage='secret world!'
          output: bru-run-output.json
          outputFormat: json
          insecure: true
          testsOnly: false
          bail: false

      # TODO assert outputs
      - name: Print Output
        id: output
        if: always()
        run: |
          echo "success=${{ steps.bru-run.outputs.success }}"
          ls -al
          ls -al .github/bruno-collection
          cat .github/bruno-collection/bru-run-output.json

  bru-run-failure:
    name: Action Failure Run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: bru-run
        continue-on-error: true
        uses: ./
        with:
          path: .github/bruno-collection
          testsOnly: false
          bail: true

      - name: Succeed on Failure
        if: ${{ steps.bru-run.outputs.success == 'false' }}
        run: exit 0

      - name: Fail on Success
        if: ${{ steps.bru-run.outputs.success == 'true' }}
        run: exit 1
